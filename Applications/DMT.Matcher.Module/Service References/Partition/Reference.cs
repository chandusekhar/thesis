//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DMT.Matcher.Module.Partition {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MatcherInfo", Namespace="http://schemas.datacontract.org/2004/07/DMT.Partition.Module.Remote.Service")]
    [System.SerializableAttribute()]
    public partial class MatcherInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PortField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Host {
            get {
                return this.HostField;
            }
            set {
                if ((object.ReferenceEquals(this.HostField, value) != true)) {
                    this.HostField = value;
                    this.RaisePropertyChanged("Host");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Port {
            get {
                return this.PortField;
            }
            set {
                if ((this.PortField.Equals(value) != true)) {
                    this.PortField = value;
                    this.RaisePropertyChanged("Port");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResponseBase", Namespace="http://schemas.datacontract.org/2004/07/DMT.Partition.Module.Remote.Service")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DMT.Matcher.Module.Partition.PartitionResponse))]
    public partial class ResponseBase : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SuccessField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Success {
            get {
                return this.SuccessField;
            }
            set {
                if ((this.SuccessField.Equals(value) != true)) {
                    this.SuccessField = value;
                    this.RaisePropertyChanged("Success");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PartitionResponse", Namespace="http://schemas.datacontract.org/2004/07/DMT.Partition.Module.Remote.Service")]
    [System.SerializableAttribute()]
    public partial class PartitionResponse : DMT.Matcher.Module.Partition.ResponseBase {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Partition.IPartitionBrokerService")]
    public interface IPartitionBrokerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartitionBrokerService/RegisterMatcher", ReplyAction="http://tempuri.org/IPartitionBrokerService/RegisterMatcherResponse")]
        bool RegisterMatcher(DMT.Matcher.Module.Partition.MatcherInfo matcherInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartitionBrokerService/RegisterMatcher", ReplyAction="http://tempuri.org/IPartitionBrokerService/RegisterMatcherResponse")]
        System.Threading.Tasks.Task<bool> RegisterMatcherAsync(DMT.Matcher.Module.Partition.MatcherInfo matcherInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartitionBrokerService/GetPartition", ReplyAction="http://tempuri.org/IPartitionBrokerService/GetPartitionResponse")]
        DMT.Matcher.Module.Partition.PartitionResponse GetPartition();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartitionBrokerService/GetPartition", ReplyAction="http://tempuri.org/IPartitionBrokerService/GetPartitionResponse")]
        System.Threading.Tasks.Task<DMT.Matcher.Module.Partition.PartitionResponse> GetPartitionAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPartitionBrokerServiceChannel : DMT.Matcher.Module.Partition.IPartitionBrokerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PartitionBrokerServiceClient : System.ServiceModel.ClientBase<DMT.Matcher.Module.Partition.IPartitionBrokerService>, DMT.Matcher.Module.Partition.IPartitionBrokerService {
        
        public PartitionBrokerServiceClient() {
        }
        
        public PartitionBrokerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PartitionBrokerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PartitionBrokerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PartitionBrokerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool RegisterMatcher(DMT.Matcher.Module.Partition.MatcherInfo matcherInfo) {
            return base.Channel.RegisterMatcher(matcherInfo);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterMatcherAsync(DMT.Matcher.Module.Partition.MatcherInfo matcherInfo) {
            return base.Channel.RegisterMatcherAsync(matcherInfo);
        }
        
        public DMT.Matcher.Module.Partition.PartitionResponse GetPartition() {
            return base.Channel.GetPartition();
        }
        
        public System.Threading.Tasks.Task<DMT.Matcher.Module.Partition.PartitionResponse> GetPartitionAsync() {
            return base.Channel.GetPartitionAsync();
        }
    }
}
